<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:jaxws="http://cxf.apache.org/jaxws"
  xmlns:cache="http://www.springframework.org/schema/cache"
  xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.2.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
         http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
         http://www.springframework.org/schema/cache
     	 http://www.springframework.org/schema/cache/spring-cache.xsd
     	 http://www.springframework.org/schema/task    
         http://www.springframework.org/schema/task/spring-task-3.2.xsd
         "
         
         
         
         >

	<!-- webService相关，引入cxf相关xml文件，都在jar包里 -->
	<!-- 位置：cxf-rt-transports-http-2.2.2.jar等。。 org.apache.cxf.transport.servlet.CXFServlet -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<!-- 发布，类似 Endpoint.publish("http://localhost:8088/calculator", new CalculatorImpl()); 语句-->
	<!-- 用#可以直接引用，使用AutoWired。如果写Full Class Path则无法自动注入，会创建一个新的对象，且没有自动注入成员 -->
	<jaxws:endpoint id="testWebservice" implementor="#testWebserviceImpl" address="/TestWebservice" />

	<!-- 扫描指定目录下除controller以外的注解 -->
	<context:component-scan base-package="com.sdyy.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:config.properties" />

    <!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="50" />
		<!-- 连接池最大空闲 该参数已废弃 -->
		<!-- property name="maxIdle" value="20" / -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
		<property name="validationQuery" value="${validationQuery}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
		<property name="testOnReturn" value="false" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                
		                监控统计用的filter:stat
		                日志用的filter:log4j
		               防御SQL注入的filter:wall -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat,wall" />
	</bean>
	<!-- 配置_Druid和Spring关联监控配置 
	 https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_Druid%E5%92%8CSpring%E5%85%B3%E8%81%94%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.sdyy.*?service.*</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
    
    <!-- 现有分页插件 -->
    <bean id="pagePlugin" class="com.sdyy.common.pulgin.mybatis.plugin.PagePlugin">
		<property name="properties">
			<props>
				<prop key="dialect">com.sdyy.common.pulgin.jdbc.dialet.${dialetname}</prop>
				<prop key="pageSqlId">.*queryPage.*</prop>
			</props>
		</property>
	</bean>
    
    <!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/sdyy/**/model/*.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<ref bean="pagePlugin" />
			</array>
		</property>
	</bean>
    
    <!-- 事务配置 -->
    <bean id="transactionManager" name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<!-- propagation:传播行为  isolation：隔离级别   rollback-for：什么异常会回滚-->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"  isolation="READ_COMMITTED" />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.sdyy..service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>
    
    <!-- 把加载了 配置文件的 sqlMapClient 注入 SqlSessionTemplate模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
		<constructor-arg index="0" ref="sqlSessionFactory" /> 
	</bean>
	<!-- 公用数据库调用接口 -->
	<bean id="dao" class="com.sdyy.common.dao.BaseDaoImpl">
		<!-- 使用构造器注入 -->
		<constructor-arg ref="sqlSession" />
	</bean> 
	
	<!--当对SpringContextUtil实例时就自动设置applicationContext,以便后来可直接用applicationContext-->
	<bean id="componentFactory" class="com.sdyy.common.spring.ComponentFactory" scope="singleton" />
	
	<!-- 处理controller抛出的异常 -->
	<bean class="com.sdyy.common.ExceptionResolver" />
	
	
	<!-- 配置国际化资源文件路径 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	<property name="basename">
		<!-- 定义消息资源文件的相对路径 -->
		<value>messages/message</value>
	</property>
	</bean>
	<!-- 基于Cookie的本地化解析器 -->
	 <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	   <property name="cookieMaxAge" value="604800"/>
	   <!-- <property name="defaultLocale" value="zh_CN"/> -->
	   <property name="cookieName" value="Language"></property>
	 </bean>
	<!-- 基于Session的本地化解析器 -->
	<!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />-->
	<!-- 基于请求 -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"></bean> -->
	
	<!-- 支持缓存注解 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="realCache" />
	</bean>
	
	<!-- 缓存配置 -->
	<bean id="realCache"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:cache/ehcache.xml" />
	</bean>
	
	<!-- 启用定时器注解 -->
	<bean id="taskScheduler" class="org.springframework.scheduling.concurrent.ConcurrentTaskScheduler" />
    <task:annotation-driven/>
    
    <bean id="mybatisMapperLoadUtil" class="com.sdyy.common.utils.MybatisMapperLoadUtil" />
    
<!-- 工作流相关服务bean -->    
     <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">  
        <property name="dataSource" ref="dataSource" />  
        <property name="transactionManager" ref="transactionManager" />  
        <property name="databaseSchemaUpdate" value="true" />  
        <property name="jobExecutorActivate" value="false" />  
    </bean>  
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">  
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />  
    </bean>  
    <!-- 这个是用activiti5几个主要的接口 -->  
    <bean id="repositoryService" factory-bean="processEngine"  
        factory-method="getRepositoryService" />  
    <bean id="runtimeService" factory-bean="processEngine"  
        factory-method="getRuntimeService" />  
    <bean id="taskService" factory-bean="processEngine"  
        factory-method="getTaskService" />  
    <bean id="historyService" factory-bean="processEngine"  
        factory-method="getHistoryService" />  
    <bean id="managementService" factory-bean="processEngine"  
        factory-method="getManagementService" />  
    <bean id="identityService" factory-bean="processEngine"  
        factory-method="getIdentityService" />  
</beans>