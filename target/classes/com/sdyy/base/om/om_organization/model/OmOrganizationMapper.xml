<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="omOrganizationSpace" >
  <resultMap id="ZTreeNodeResultMap" type="com.sdyy.common.zTree.ZTreeNode" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="PID" property="pId" jdbcType="VARCHAR" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="TYPE" property="type" jdbcType="VARCHAR" />
    <result column="ICON_SKIN" property="iconSkin" jdbcType="VARCHAR" />
    <result column="IS_PARENT" property="isParent" jdbcType="CHAR" />
    <result column="EXTEND_ATTR" property="extendAttr" jdbcType="VARCHAR" />
    <result column="EXTEND_ATTR_1" property="extendAttr1" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    ORG_ID, ORG_CODE, ORG_NAME, ORG_LEVEL, ORG_DEGREE, PARENT_ORG_ID, ORG_SEQ, ORG_TYPE, 
    ORG_ADDR, ZIP_CODE, MANA_POSITION, MANAGER_ID, ORG_MANAGER, LINK_MAN, LINK_TEL, EMAIL, 
    WEB_URL, START_DATE, END_DATE, STATUS, AREA, CREATE_TIME, LAST_UPDATE_TIME, UPDATOR, 
    SORT_NO, IS_LEAF, REMARK,
    (SELECT ORG_NAME FROM OM_ORGANIZATION P_ORG WHERE P_ORG.ORG_ID=OM_ORGANIZATION.PARENT_ORG_ID ) PARENT_ORG_NAME
  </sql>
  <select id="get" resultType="map" parameterType="string" >
    SELECT
    <include refid="Base_Column_List" />
    FROM OM_ORGANIZATION
    WHERE ORG_ID = #{ORG_ID}
  </select>
  <select id="query" resultType="map" parameterType="map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM OM_ORGANIZATION
    WHERE ORG_ID !='root'
    <if test="ORG_CODE != null" >
		AND ORG_CODE = #{ORG_CODE}
	</if>
	<if test="NOT_ORG_ID != null" >
		AND ORG_ID != #{NOT_ORG_ID}
	</if>
  </select>
  <select id="queryPage" resultType="map" parameterType="map" >
    SELECT
    <include refid="Base_Column_List" />
    FROM OM_ORGANIZATION
    WHERE 1=1
  </select>
  <select id="queryChildrenTreeNodes" resultMap="ZTreeNodeResultMap" parameterType="map" >
  	<!-- 构建说明
  		因为：人员可以直接挂在机构下，也可以直接挂在岗位下，岗位如果没有父岗位则必须挂在机构下，如果有父岗位则不能挂在机构下
		所以：机构的父子结构通过 机构主表的id、父id
			岗位的父子结构通过 岗位主表自身id、父id【如果父岗位字段是空的则是挂在机构下的用机构关联、如果父岗位字段不是空的则是挂在父岗位下的】
			人员所属父节点通过 人员机构中间表、人员岗位中间表
  	 -->
    SELECT * FROM
		(
			(
				SELECT
					ORG_ID ID,
					PARENT_ORG_ID PID,
					SORT_NO CODE,
					ORG_NAME NAME,
					'ORG' TYPE,
					'OpIcon02' ICON_SKIN,
					'1' IS_PARENT,
					ORG_ID EXTEND_ATTR,
					'' EXTEND_ATTR_1
				FROM
					OM_ORGANIZATION
				WHERE
					1 = 1
					<if test="pId != null" >
						AND PARENT_ORG_ID = #{pId}
					</if>
					<if test="orgIdList != null" >
						AND FIND_IN_SET(ORG_ID,#{orgIdList})
					</if>
			)
			<!-- <if test="init == null" > -->
			UNION ALL
				(
					SELECT
						POSITION_ID ID,
						ORG_ID PID,
						POSI_CODE CODE,
						POSI_NAME NAME,
						'POSI' TYPE,
						'OpIcon01' ICON_SKIN,
						'1' IS_PARENT,
						ORG_ID EXTEND_ATTR,
						POSITION_ID EXTEND_ATTR_1
					FROM
						OM_POSITION
					WHERE
							ifnull(PARENT_POSI_ID,'') = ''
							<if test="pId != null" >
								AND ORG_ID = #{pId}
							</if>
							<if test="orgIdList != null" >
								AND FIND_IN_SET(ORG_ID,#{orgIdList})
							</if>
				)
			UNION ALL
				(
					SELECT
						POSITION_ID ID,
						PARENT_POSI_ID PID,
						POSI_CODE CODE,
						POSI_NAME NAME,
						'POSI' TYPE,
						'OpIcon01' ICON_SKIN,
						'1' IS_PARENT,
						ORG_ID EXTEND_ATTR,
						POSITION_ID EXTEND_ATTR_1
					FROM
						OM_POSITION
					WHERE
							ifnull(PARENT_POSI_ID,'') != ''
							<if test="pId != null" >
								AND PARENT_POSI_ID = #{pId}
							</if>
							<if test="orgIdList != null" >
								AND FIND_IN_SET(ORG_ID,#{orgIdList})
							</if>
				)
			UNION ALL
				(
					SELECT
						OM_EMPLOYEE.EMP_ID ID,
						OM_EMP_ORG.ORG_ID PID,
						EMP_CODE CODE,
						EMP_NAME NAME,
						'EMP' TYPE,
						'OpIcon03' ICON_SKIN,
						'0' IS_PARENT,
						OM_EMP_ORG.ORG_ID EXTEND_ATTR,
						POSITION EXTEND_ATTR_1
					FROM
							OM_EMPLOYEE,OM_EMP_ORG
					WHERE
						OM_EMPLOYEE.EMP_ID = OM_EMP_ORG.EMP_ID
						<if test="pId != null" >
							AND OM_EMP_ORG.ORG_ID = #{pId}
						</if>
						<if test="orgIdList != null" >
							AND FIND_IN_SET(OM_EMP_ORG.ORG_ID,#{orgIdList})
						</if>
				)
			UNION ALL
				(
					SELECT
						OM_EMPLOYEE.EMP_ID ID,
						OM_EMP_POSITION.POSITION_ID PID,
						EMP_CODE CODE,
						EMP_NAME NAME,
						'EMP' TYPE,
						'OpIcon03' ICON_SKIN,
						'0' IS_PARENT,
						ORG_ID EXTEND_ATTR,
						POSITION EXTEND_ATTR_1
					FROM
							OM_EMPLOYEE,OM_EMP_POSITION
					WHERE
						OM_EMPLOYEE.EMP_ID = OM_EMP_POSITION.EMP_ID
						<if test="pId != null" >
							AND OM_EMP_POSITION.POSITION_ID = #{pId}
						</if>
						<if test="orgIdList != null" >
							AND FIND_IN_SET(ORG_ID,#{orgIdList})
						</if>
				)
			<!-- </if> -->
		) T
	WHERE
		1=1
	<if test="pId == null and orgIdList == null" >
		AND 1=-1<!-- T.PID in ('-1','root') -->
	</if>
	<if test="pId != null" >
		AND T.PID = #{pId}
	</if>
	ORDER BY T.TYPE, T.CODE
  </select>
  
  <select id="queryOnlyOrgChildrenTreeNodes" resultMap="ZTreeNodeResultMap" parameterType="map" >
  	<!-- 构建说明
  		因为：人员可以直接挂在机构下，也可以直接挂在岗位下，岗位如果没有父岗位则必须挂在机构下，如果有父岗位则不能挂在机构下
		所以：机构的父子结构通过 机构主表的id、父id
			岗位的父子结构通过 岗位主表自身id、父id【如果父岗位字段是空的则是挂在机构下的用机构关联、如果父岗位字段不是空的则是挂在父岗位下的】
			人员所属父节点通过 人员机构中间表、人员岗位中间表
  	 -->
    SELECT * FROM
		(
				SELECT
					OM_ORGANIZATION.ORG_ID ID,
					PARENT_ORG_ID PID,
					SORT_NO CODE,
					ORG_NAME NAME,
					'ORG' TYPE,
					'OpIcon02' ICON_SKIN,
					'1' IS_PARENT,
					OM_ORGANIZATION.ORG_ID EXTEND_ATTR,
					'' EXTEND_ATTR_1
					FROM 
				    (
				    	SELECT T0.ORG_ID FROM OM_ORGANIZATION T0 
				    	WHERE FIND_IN_SET(T0.ORG_ID, OM_ORGANIZATION_QUERY_CHILDREN(#{pId}))
					) T1
					INNER JOIN OM_ORGANIZATION
					ON T1.ORG_ID = OM_ORGANIZATION.ORG_ID

		) T
	WHERE
		1=1
	ORDER BY T.TYPE, T.CODE
  </select>
  
  <delete id="delete" parameterType="string" >
    DELETE OM_ORGANIZATION,OM_EMP_ORG,OM_POSITION,OM_EMP_POSITION,OM_EMPLOYEE,AC_OPERATOR,AC_OPERATOR_ROLE,AC_OPER_FUNC
    FROM 
    (
    	SELECT ORG_ID FROM OM_ORGANIZATION WHERE FIND_IN_SET(OM_ORGANIZATION.ORG_ID, OM_ORGANIZATION_QUERY_CHILDREN(#{ORG_ID}))
	) T
	INNER JOIN OM_ORGANIZATION
	ON T.ORG_ID = OM_ORGANIZATION.ORG_ID
    
    LEFT JOIN OM_EMP_ORG
    ON OM_EMP_ORG.ORG_ID = OM_ORGANIZATION.ORG_ID
    
    LEFT JOIN OM_POSITION
    ON OM_POSITION.ORG_ID = OM_ORGANIZATION.ORG_ID
    
    LEFT JOIN OM_EMP_POSITION
    ON OM_EMP_POSITION.POSITION_ID = OM_POSITION.POSITION_ID
    
    LEFT JOIN OM_EMPLOYEE
    ON OM_EMPLOYEE.ORG_ID = OM_ORGANIZATION.ORG_ID
    
    LEFT JOIN AC_OPERATOR
    ON AC_OPERATOR.OPERATOR_ID = OM_EMPLOYEE.OPERATOR_ID
    
    LEFT JOIN AC_OPERATOR_ROLE
    ON AC_OPERATOR_ROLE.OPERATOR_ID = OM_EMPLOYEE.OPERATOR_ID
    
    LEFT JOIN AC_OPER_FUNC
    ON AC_OPER_FUNC.OPERATOR_ID = AC_OPERATOR.OPERATOR_ID
    
    
  </delete>
  <insert id="insert" parameterType="map" >
    INSERT INTO OM_ORGANIZATION (ORG_ID, ORG_CODE, ORG_NAME, 
      ORG_LEVEL, ORG_DEGREE, PARENT_ORG_ID, 
      ORG_SEQ, ORG_TYPE, ORG_ADDR, 
      ZIP_CODE, MANA_POSITION, MANAGER_ID, 
      ORG_MANAGER, LINK_MAN, LINK_TEL, 
      EMAIL, WEB_URL, START_DATE, 
      END_DATE, STATUS, AREA, 
      CREATE_TIME, LAST_UPDATE_TIME, UPDATOR, 
      SORT_NO, IS_LEAF, REMARK
      )
    VALUES (#{ORG_ID}, #{ORG_CODE}, #{ORG_NAME}, 
      #{ORG_LEVEL}, #{ORG_DEGREE}, #{PARENT_ORG_ID}, 
      #{ORG_SEQ}, #{ORG_TYPE}, #{ORG_ADDR}, 
      #{ZIP_CODE}, #{MANA_POSITION}, #{MANAGER_ID}, 
      #{ORG_MANAGER}, #{LINK_MAN}, #{LINK_TEL}, 
      #{EMAIL}, #{WEB_URL}, #{START_DATE}, 
      #{END_DATE}, #{STATUS}, #{AREA}, 
      #{CREATE_TIME}, #{LAST_UPDATE_TIME}, #{UPDATOR}, 
      #{SORT_NO}, #{IS_LEAF}, #{REMARK}
      )
  </insert>
  

  <update id="update" parameterType="map" >
   UPDATE OM_ORGANIZATION
    <set >
      <if test="ORG_CODE != null" >
        ORG_CODE = #{ORG_CODE},
      </if>
      <if test="ORG_NAME != null" >
        ORG_NAME = #{ORG_NAME},
      </if>
      <if test="ORG_LEVEL != null" >
        ORG_LEVEL = #{ORG_LEVEL},
      </if>
      <if test="ORG_DEGREE != null" >
        ORG_DEGREE = #{ORG_DEGREE},
      </if>
      <if test="PARENT_ORG_ID != null" >
        PARENT_ORG_ID = #{PARENT_ORG_ID},
      </if>
      <if test="ORG_SEQ != null" >
        ORG_SEQ = #{ORG_SEQ},
      </if>
      <if test="ORG_TYPE != null" >
        ORG_TYPE = #{ORG_TYPE},
      </if>
      <if test="ORG_ADDR != null" >
        ORG_ADDR = #{ORG_ADDR},
      </if>
      <if test="ZIP_CODE != null" >
        ZIP_CODE = #{ZIP_CODE},
      </if>
      <if test="MANA_POSITION != null" >
        MANA_POSITION = #{MANA_POSITION},
      </if>
      <if test="MANAGER_ID != null" >
        MANAGER_ID = #{MANAGER_ID},
      </if>
      <if test="ORG_MANAGER != null" >
        ORG_MANAGER = #{ORG_MANAGER},
      </if>
      <if test="LINK_MAN != null" >
        LINK_MAN = #{LINK_MAN},
      </if>
      <if test="LINK_TEL != null" >
        LINK_TEL = #{LINK_TEL},
      </if>
      <if test="EMAIL != null" >
        EMAIL = #{EMAIL},
      </if>
      <if test="WEB_URL != null" >
        WEB_URL = #{WEB_URL},
      </if>
      <if test="START_DATE != null" >
        START_DATE = #{START_DATE},
      </if>
      <if test="END_DATE != null" >
        END_DATE = #{END_DATE},
      </if>
      <if test="STATUS != null" >
        STATUS = #{STATUS},
      </if>
      <if test="AREA != null" >
        AREA = #{AREA},
      </if>
      <if test="CREATE_TIME != null" >
        CREATE_TIME = #{CREATE_TIME},
      </if>
      <if test="LAST_UPDATE_TIME != null" >
        LAST_UPDATE_TIME = #{LAST_UPDATE_TIME},
      </if>
      <if test="UPDATOR != null" >
        UPDATOR = #{UPDATOR},
      </if>
      <if test="SORT_NO != null" >
        SORT_NO = #{SORT_NO},
      </if>
      <if test="IS_LEAF != null" >
        IS_LEAF = #{IS_LEAF},
      </if>
      <if test="REMARK != null" >
        REMARK = #{REMARK},
      </if>
    </set>
    WHERE ORG_ID = #{ORG_ID}
  </update>
</mapper>